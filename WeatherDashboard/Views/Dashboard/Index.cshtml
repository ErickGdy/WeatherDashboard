@{
    ViewBag.Title = "Weather Application";
}
@model WeatherDashboard.Models.DatePickerModel
@using WeatherDashboard.Models
<div class="row" style="padding:10px">
	
	<div class="col-md-3">
		<h3>Location</h3>
		@(Html.DropDownList("Estado", new SelectList(StatesCitiesModel.GetEstados()), ViewData["States"].ToString(), new { @id = "cmb_State", style = "height:35px;width:100%;" })
		)
		@(Html.DropDownList("Ciudad", new SelectList((String[])ViewData["Cities"]), new { @id = "cmb_City", style = "height:35px;width:100%;" })
		)
	</div>
	<div class="col-sm-3">
		<h3>Period</h3>
		<div class='input-group date' ">
			<span class="input-group-addon">
				<span class="glyphicon glyphicon-calendar"></span>
			</span>
			@Html.EditorFor(model => model.DatePickerValue, new { htmlAttributes = new { @class = "datepickerStart", style = "height:35px;width:100%;" } })
		</div>
		<div class='input-group date'">
			<span class="input-group-addon">
				<span class="glyphicon glyphicon-calendar"></span>
			</span>
			@Html.EditorFor(model => model.DatePickerValue, new { htmlAttributes = new { @class = "datepickerEnd", style = "height:35px;width:100%;" } })
		</div>

		
	</div>

    <div class="col-md-3">
		<h3>Scale</h3>
		@(Html.DropDownList("Scale",
		  new SelectList(new List<string>()
		  { "Celsius","Fahrenheit"
		  }), new { @id = "cmb_Scale", style = "height:35px;width:100%;" })
		)
    </div>
	<div class="col-md-3">
		<h3>Search Temperature</h3>
		<button type="button" class="btn btn-info" onclick="searchTemperature()">
			<span class="glyphicon glyphicon-search"></span> Search
		</button>
	</div>
</div>

<div class="jumbotron">
	<h2 id="Label_City">WEATHER APP</h2><br/>
	<h2 id="Current_Temp"></h2>
	<div class="row">
		<div class="col-md-8">
			<div id="WeatherChart">
				<div id="chartContainer" style="height: 300px; width: 100%;"></div>
			</div>
		</div>
		<div class="col-md-4">
			<h3>Notes:</h3>
			<h4>This application search next 15 days temperatures of selected city.</h4>
			<h4>Show a range of dates temperatures is not possible without a premium API.</h4>
			<h4>In small cities or towns, information can be unavailable</h4>
		</div>
	</div>
</div>

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />

@section scripts{
	<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

	<script type="text/javascript">
		$(document).ready(function () {
			//Establece propiedades de datePicker
			$(".datepickerStart").datepicker({
				dateFormat: "yy-mm-dd",
				changeMonth: true,
				changeYear: true,
				maxDate: new Date(),
				showOn: "focus",
			}).datepicker("setDate", new Date());

			$(".datepickerEnd").datepicker({
				dateFormat: "yy-mm-dd",
				changeMonth: true,
				changeYear: true,
				maxDate: new Date(),
				showOn: "focus",
			}).datepicker("setDate", new Date());
			//$('#cmb_State').attr("disabled", true);
			$('.datepicker').attr("disabled", true);
			$('#cmb_City').val("Ciudad Obregón");
			searchTemperature();
			//Populate DropDownList failed
			$('#cmb_State').on('change', function () {
				var selectedState = $("#cmb_State").val();
				var citiesSelect = $('#cmb_City');
				citiesSelect.empty();
				if (selectedState != null || selectedState != 'Seleccione Estado') {
					$.get("@Url.Action("GetCities", "Dashboard")",
					{ state: selectedState },
					function (respose) {
						console.log(JSON.parse(respose));
						$.each(JSON.parse(respose),function(index,item){
							citiesSelect.append($('<option></option>').val(item).text(item.toString()));
						});
					});
				}
			});
			$('#cmb_City').on('change', function () {
				searchTemperature();
			});

		});
		function searchTemperature() {
			var selectedState = $("#cmb_State").children("option").filter(":selected").text();
			var citySelect = $('#cmb_City').val();
			var dateStart = $(".datepickerStart").val();
			var dateEnd = $(".datepickerEnd").val();
			var scale = $("#cmb_Scale").val();
			if(scale=="Celsius")
				scale="M";
			else
				scale="I";
			if (selectedState != "" && citySelect != "" && dateStart != "" && dateEnd != "" && scale != "") {
				var xMin = [];
				var yMin = [];
				var xMax = [];
				var yMax = [];
				$.get("@Url.Action("GetWeatherDays", "Dashboard")",
					{ City: citySelect, State: selectedState, Days: 15, Scale: scale },
					function (respose) {
						console.log(respose);
						$("#Label_City").text(citySelect + "  " + respose.data[0].temp + " " +  $("#cmb_Scale").val());
						$.each(respose.data, function (index, item) {
							yMin[index] = item.min_temp;
							xMin[index] = item.datetime;
							yMax[index] = item.max_temp;
							xMax[index] = item.datetime;
						});
						graphChart(yMin,xMin,yMax,xMax);
					});
			}
		}

		function graphChart(yMin, xMin, yMax, xMax) {
				var options = {
					exportEnabled: true,
					animationEnabled: true,
					title: {
						text: "Temperatures Scales"
					},
					subtitles: [{
						text: "Weather"
					}],
					axisX: {
						title: "Dates"
					},
					axisY: {
						title: "Temperatures",
						titleFontColor: "#C0504E",
						lineColor: "#C0504E",
						labelFontColor: "#C0504E",
						tickColor: "#C0504E",
						includeZero: true
					},
					axisY2: {
						title: "Temperatures",
						titleFontColor: "#4F81BC",
						lineColor: "#4F81BC",
						labelFontColor: "#4F81BC",
						tickColor: "#4F81BC",
						includeZero: true
					},
					toolTip: {
						shared: false
					},
					legend: {
						cursor: "pointer",
						itemclick: toggleDataSeries
					},
					data: [{
						type: "spline",
						name: "Temperature Max",
						showInLegend: true,
						xValueFormatString: "DD MMM YYYY",
						yValueFormatString: "#,##0 °",
						dataPoints: [
							{ x: new Date(xMin[0]),y: yMin[0] },
							{ x: new Date(xMin[1]), y: yMin[1] },
							{ x: new Date(xMin[2]), y: yMin[2] },
							{ x: new Date(xMin[3]), y: yMin[3] },
							{ x: new Date(xMin[4]), y: yMin[4] },
							{ x: new Date(xMin[5]), y: yMin[5] },
							{ x: new Date(xMin[6]), y: yMin[6] },
							{ x: new Date(xMin[7]), y: yMin[7] },
							{ x: new Date(xMin[8]), y: yMin[8] },
							{ x: new Date(xMin[9]), y: yMin[9] },
							{ x: new Date(xMin[10]), y: yMin[10] },
							{ x: new Date(xMin[11]), y: yMin[11] },
							{ x: new Date(xMin[12]), y: yMin[12] },
							{ x: new Date(xMin[13]), y: yMin[13] },
							{ x: new Date(xMin[14]), y: yMin[14] }

						]
					},
					{
						type: "spline",
						name: "Temperature Min",
						axisYType: "secondary",
						showInLegend: true,
						xValueFormatString: "DD MMM YYYY",
						yValueFormatString: "#,##0 °",
						dataPoints: [
							{ x: new Date(xMax[0]),y: yMax[0] },
							{ x: new Date(xMax[1]), y: yMax[1] },
							{ x: new Date(xMax[2]), y: yMax[2] },
							{ x: new Date(xMax[3]), y: yMax[3] },
							{ x: new Date(xMax[4]), y: yMax[4] },
							{ x: new Date(xMax[5]), y: yMax[5] },
							{ x: new Date(xMax[6]), y: yMax[6] },
							{ x: new Date(xMax[7]), y: yMax[7] },
							{ x: new Date(xMax[8]), y: yMax[8] },
							{ x: new Date(xMax[9]), y: yMax[9] },
							{ x: new Date(xMax[10]), y: yMax[10] },
							{ x: new Date(xMax[11]), y: yMax[11] },
							{ x: new Date(xMax[12]), y: yMax[12] },
							{ x: new Date(xMax[13]), y: yMax[13] },
							{ x: new Date(xMax[14]), y: yMax[14] }

						]
					}
					]
				};
				$("#chartContainer").CanvasJSChart(options);
			}

			function toggleDataSeries(e) {
				if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
					e.dataSeries.visible = false;
				} else {
					e.dataSeries.visible = true;
				}
				e.chart.render();
			}
</script>
<script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
}