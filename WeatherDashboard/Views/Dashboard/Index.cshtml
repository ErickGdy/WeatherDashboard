@{
    ViewBag.Title = "Weather Application";
}
@model WeatherDashboard.Models.DatePickerModel
@using WeatherDashboard.Models
<div class="row" style="padding:10px">
	
	<div class="col-md-3">
		<h3>Location</h3>
		@(Html.DropDownList("Estado", new SelectList(StatesCitiesModel.GetEstados()), ViewData["States"].ToString(), new { @id = "cmb_State", style = "height:35px;width:100%;" })
		)
		@(Html.DropDownList("Ciudad", new SelectList((String[])ViewData["Cities"]), new { @id = "cmb_City", style = "height:35px;width:100%;" })
		)
	</div>
	<div class="col-sm-3">
		<h3>Period</h3>
		<div class='input-group date'>
			<span class="input-group-addon">
				<span class="glyphicon glyphicon-calendar"></span>
			</span>
			@Html.EditorFor(model => model.DatePickerValue, new { htmlAttributes = new { @class = "datepickerStart", style = "height:35px;width:100%;" } })
		</div>
		<div class='input-group date'">
			<span class="input-group-addon">
				<span class="glyphicon glyphicon-calendar"></span>
			</span>
			@Html.EditorFor(model => model.DatePickerValue2, new { htmlAttributes = new { @class = "datepickerEnd", style = "height:35px;width:100%;" } })
		</div>

		
	</div>

    <div class="col-md-3">
		<h3>Scale</h3>
		@(Html.DropDownList("Scale",
		  new SelectList(new List<string>()
		  { "Celsius","Fahrenheit"
		  }), new { @id = "cmb_Scale", style = "height:35px;width:100%;" })
		)
    </div>
	<div class="col-md-3">
		<h3>Search Temperature</h3>
		<button type="button" class="btn btn-info" onclick="searchTemperatureByPeriod()">
			<span class="glyphicon glyphicon-search"></span> Search
		</button>
	</div>
</div>

<div class="jumbotron" style="padding-bottom:20px; padding-top:20px;">
	<h3 id="Label_City">WEATHER APP</h3>
	<div class="row">
		<div class="col-md-8">
			<div id="WeatherChart">
				<div id="chartContainer" style="height: 370px; width: 100%; margin-left:auto;margin-right:auto;"></div>
			</div>
		</div>
	</div>
	<div class="row" style="padding-top:5px;">
		<div class="col-md-8">
			<h4>Notes:</h4>
			<ul style="list-style:none;">
				<li>In small cities or towns, information can be unavailable</li>
				<li>If graph doesn't show information, you need to change de API KEY or wait 24 hours</li>
			</ul>
		</div>
	</div>
</div>

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />

@section scripts{
	<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

	<script type="text/javascript">
		$(document).ready(function () {
			//set datePicker properties
			var date = moment();
			$(".datepickerStart").datepicker({
				dateFormat: "yy-mm-dd",
				changeMonth: true,
				changeYear: true,
				maxDate: new Date(),
				showOn: "focus",
			}).datepicker("setDate", moment().subtract(2, 'days').format("YYYY-MM-DD"));

			$(".datepickerEnd").datepicker({
				dateFormat: "yy-mm-dd",
				changeMonth: true,
				changeYear: true,
				maxDate: new Date(),
				showOn: "focus",
			}).datepicker("setDate", new Date());
			
			$('#cmb_City').val("Ciudad Obregón");
			searchTemperatureByPeriod();
			//Populate DropDownList
			$('#cmb_State').on('change', function () {
				var selectedState = $("#cmb_State").val();
				var citiesSelect = $('#cmb_City');
				citiesSelect.empty();
				if (selectedState != null || selectedState != 'Seleccione Estado') {
					$.get("@Url.Action("GetCities", "Dashboard")",
					{ state: selectedState },
					function (respose) {
						console.log(JSON.parse(respose));
						$.each(JSON.parse(respose),function(index,item){
							citiesSelect.append($('<option></option>').val(item).text(item.toString()));
						});
					});
				}
			});
			$('#cmb_City').on('change', function () {
				searchTemperatureByPeriod();
			});
			$('#cmb_Scale').on('change', function () {
				searchTemperatureByPeriod();
			});

		});

		function searchTemperatureByPeriod() {
			var selectedState = $("#cmb_State").children("option").filter(":selected").text();
			var citySelect = $('#cmb_City').val();
			var dateStart = $(".datepickerStart").val();
			var dateEnd = $(".datepickerEnd").val();
			var scale = $("#cmb_Scale").val();
			if(scale=="Celsius")
				scale="M";
			else
				scale="I";
			if (selectedState != "" && citySelect != "" && dateStart != "" && dateEnd != "" && scale != "") {
				if (new Date(dateEnd) > new Date(dateStart)) {
					var temp;
					$.get("@Url.Action("GetWeatherHistorical", "Dashboard")",
				{ City: citySelect, State: selectedState, DateStart: dateStart, DateEnd: dateEnd, Scale: scale },
				function (respose) {
					console.log(respose);
					var dataPoints = [];
					var dataPoints2 = [];
					var options = {
						exportEnabled: true,
						animationEnabled: true,
						title: {
							text: "Temperatures Scales"
						},
						subtitles: [{
							text: "Weather"
						}],
						axisX: {
							title: "Dates"
						},
						axisY: {
							title: "Temperatures",
							titleFontColor: "#4F81BC",
							lineColor: "#4F81BC",
							labelFontColor: "#4F81BC",
							tickColor: "#4F81BC",
							includeZero: true
						},
						axisY2: {
							title: "Temperatures",
							titleFontColor: "#C0504E",
							lineColor: "#C0504E",
							labelFontColor: "#C0504E",
							tickColor: "#C0504E",
							includeZero: true
						},
						toolTip: {
							shared: false
						},
						legend: {
							cursor: "pointer",
							itemclick: toggleDataSeries
						},
						data: [{
							type: "spline",
							name: "Temperature Max",
							showInLegend: true,
							xValueFormatString: "DD MMM YYYY",
							yValueFormatString: "#,##0 °",
							dataPoints: dataPoints
						},
						{
							type: "spline",
							name: "Temperature Min",
							axisYType: "secondary",
							showInLegend: true,
							xValueFormatString: "DD MMM YYYY",
							yValueFormatString: "#,##0 °",
							dataPoints: dataPoints2
						}
						]
					};
					temp = respose[respose.length - 1].temperature;
					$("#Label_City").text(citySelect + "  " + temp + " " + $("#cmb_Scale").val());
					$.each(respose, function (index, item) {
						dataPoints.push({
							x: new Date(item.date),
							y: parseInt(item.temp_min)
						});
						dataPoints2.push({
							x: new Date(item.date),
							y: parseInt(item.temp_max)
						});
					});
					$("#chartContainer").CanvasJSChart(options);
				});
				} else {
					alert("Select a date range valid");
				}
			}
		}


			function toggleDataSeries(e) {
				if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
					e.dataSeries.visible = false;
				} else {
					e.dataSeries.visible = true;
				}
				e.chart.render();
			}
</script>
<script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
}